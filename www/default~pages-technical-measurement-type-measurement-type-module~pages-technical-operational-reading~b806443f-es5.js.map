{"version":3,"sources":["src/app/pages/technical/measurement-type/measurement-type.page.html","src/app/pages/technical/measurement-type/measurement-type.page.scss","src/app/pages/technical/measurement-type/measurement-type.page.ts","src/app/shared/services/operational-readings/operational-readings.service.ts"],"names":[],"mappings":"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","sourcesContent":["export default \"<ion-header mode=\\\"ios\\\" class=\\\"ion-no-border\\\">\\n  <ion-toolbar mode=\\\"ios\\\" class=\\\"ion-no-border toolbar-core\\\">\\n    <ion-buttons slot=\\\"start\\\">\\n      <ion-button (click)=\\\"clickDismiss()\\\">\\n        <ion-icon\\n          src=\\\"../../../../assets/icon/air-selangor-icon.svg\\\"\\n          style=\\\"font-size: 2rem\\\"\\n        ></ion-icon>\\n      </ion-button>\\n    </ion-buttons>\\n    <ion-title style=\\\"font-weight: bold\\\"></ion-title>\\n    <ion-buttons slot=\\\"end\\\">\\n      <ion-button (click)=\\\"openNotification()\\\">\\n        <ion-icon slot=\\\"icon-only\\\" name=\\\"notifications\\\"></ion-icon>\\n        <ion-badge\\n          size=\\\"small\\\"\\n          color=\\\"danger\\\"\\n          style=\\\"position: absolute; right: -5px; top: 1px\\\"\\n          >{{ notificationService.totalnotificationbyuser }}</ion-badge\\n        >\\n      </ion-button>\\n    </ion-buttons>\\n  </ion-toolbar>\\n</ion-header>\\n\\n<ion-content class=\\\"content-core\\\">\\n  <div class=\\\"ion-padding\\\">\\n    <ion-list class=\\\"line-input\\\">\\n      <form [formGroup]=\\\"measurementtypeFormGroup\\\">\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Measurement Type</ion-label>\\n          <ion-select formControlName=\\\"measurement_type\\\">\\n            <ion-select-option value=\\\"RUNNING HOUR\\\"\\n              >RUNNING HOUR</ion-select-option\\n            >\\n            <ion-select-option value=\\\"TEMPERATURE SENSOR\\\"\\n              >TEMPERATURE SENSOR</ion-select-option\\n            >\\n          </ion-select>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Reading Date</ion-label>\\n          <ion-datetime displayFormat=\\\"YYYY-MM-DD\\\" formControlName=\\\"reading_date\\\"></ion-datetime>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Reading Time</ion-label>\\n          <ion-datetime displayFormat=\\\"HH:mm\\\" formControlName=\\\"reading_time\\\"></ion-datetime>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Current Value</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"current_value\\\"></ion-input>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Initial Value</ion-label>\\n          <ion-input type=\\\"text\\\" formControlName=\\\"initial_value\\\"></ion-input>\\n        </ion-item>\\n\\n        <ion-item>\\n          <ion-label position=\\\"stacked\\\">Owning Organization</ion-label>\\n          <ion-select formControlName=\\\"owning_organization\\\">\\n            <ion-select-option value=\\\"\\\">Please select</ion-select-option>\\n            <ion-select-option value=\\\"ES-D\\\">ENGINEERING SERVICES - DISTRIBUTION</ion-select-option>\\n            <ion-select-option value=\\\"FLEET\\\">FLEET</ion-select-option>\\n            <ion-select-option value=\\\"NRW\\\">NRW</ion-select-option>\\n            <ion-select-option value=\\\"PD-N\\\">PRODUCTION NORTHERN</ion-select-option>\\n            <ion-select-option value=\\\"PD-S\\\">PRODUCTION SOUTHERN</ion-select-option>\\n            <ion-select-option value=\\\"SCADA\\\">SCADA</ion-select-option>\\n          </ion-select>\\n        </ion-item>\\n\\n        <!-- <ion-item>\\n          <ion-label position=\\\"stacked\\\"\\n            >Measurement Gauge Meter Reason</ion-label\\n          >\\n          <ion-textarea\\n            rows=\\\"5\\\"\\n            formControlName=\\\"measurement_gauge_meter_reason\\\"\\n          ></ion-textarea>\\n        </ion-item> -->\\n      </form>\\n    </ion-list>\\n\\n    <div class=\\\"ion-text-center ion-padding\\\">\\n      <ion-button color=\\\"light\\\" (click)=\\\"clickDismiss()\\\">Cancel</ion-button>\\n      <ion-button color=\\\"primary\\\" (click)=\\\"save()\\\">Save</ion-button>\\n    </div>\\n  </div>\\n</ion-content>\\n\"","export default \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL3BhZ2VzL3RlY2huaWNhbC9tZWFzdXJlbWVudC10eXBlL21lYXN1cmVtZW50LXR5cGUucGFnZS5zY3NzIn0= */\"","import { DatePipe, Location } from \"@angular/common\";\nimport { Component, OnInit } from \"@angular/core\";\nimport {\n  Validators,\n  FormBuilder,\n  FormGroup,\n  FormControl,\n} from \"@angular/forms\";\nimport {\n  AlertController,\n  MenuController,\n  ModalController,\n  NavParams,\n} from \"@ionic/angular\";\n\nimport { NotificationsService } from \"src/app/shared/services/notifications/notifications.service\";\nimport { OperationalReadingsService } from \"src/app/shared/services/operational-readings/operational-readings.service\";\n\n@Component({\n  selector: \"app-measurement-type\",\n  templateUrl: \"./measurement-type.page.html\",\n  styleUrls: [\"./measurement-type.page.scss\"],\n  providers: [DatePipe],\n})\nexport class MeasurementTypePage implements OnInit {\n  // Forms\n  measurementtypeFormGroup: FormGroup;\n  myDate = new Date();\n\n  constructor(\n    public alertController: AlertController,\n    public formBuilder: FormBuilder,\n    private datePipe: DatePipe,\n    public location: Location,\n    public menu: MenuController,\n    public modalController: ModalController,\n    public navParams: NavParams,\n    public notificationService: NotificationsService,\n    private operationalreadingService: OperationalReadingsService\n  ) {\n    this.measurementtypeFormGroup = this.formBuilder.group({\n      id: new FormControl(\"\"),\n      asset_id: new FormControl(\"\"),\n      badge_number: new FormControl(\"\"),\n      measurement_type: new FormControl(\"\", Validators.required),\n      reading_date: new FormControl(\n        new Date().toISOString(),\n        Validators.required\n      ),\n      reading_time: new FormControl(\n        new Date().toISOString(),\n        Validators.required\n      ),\n      current_value: new FormControl(\"\", Validators.required),\n      initial_value: new FormControl(\"\", Validators.required),\n      owning_organization: new FormControl(\"\", Validators.required),\n      date: new FormControl(\"\"),\n      status: new FormControl(\"\"),\n    });\n\n    if (this.navParams.get(\"measurementtype\")) {\n      this.measurementtypeFormGroup.patchValue({\n        ...this.navParams.get(\"measurementtype\"),\n      });\n    }\n    if (this.navParams.get(\"asset\")) {\n      this.measurementtypeFormGroup.patchValue({\n        ...this.navParams.get(\"asset\"),\n      });\n    }\n  }\n\n  ngOnInit() {\n    this.menu.enable(false, \"menuNotification\");\n  }\n\n  async presentAlert(header: string, message: string) {\n    const alert = await this.alertController.create({\n      header,\n      message,\n      buttons: [\"OK\"],\n    });\n\n    await alert.present();\n  }\n\n  save() {\n    // this.measurementtypeFormGroup.patchValue({\n    //   status: \"Pending for Approval\",\n    // });\n    // this.operationalreadingService\n    //   .update(\n    //     this.measurementtypeFormGroup.value.id,\n    //     this.measurementtypeFormGroup.value\n    //   )\n    //   .subscribe(\n    //     (res) => {\n    //       console.log(\"res\", res);\n          this.alertMeasurementType(\n            \"Measurement Type\",\n            \"Your measurement type have successfully submitted into the system. Thank you.\"\n          );\n      //   },\n      //   (err) => {\n      //     console.error(\"err\", err);\n      //   }\n      // );\n  }\n\n  async alertMeasurementType(header, message) {\n    const alert = await this.alertController.create({\n      header,\n      message,\n      buttons: [\n        {\n          text: \"OK\",\n          handler: () => {\n            this.modalController.dismiss(this.measurementtypeFormGroup.value);\n          },\n        },\n      ],\n    });\n\n    await alert.present();\n  }\n\n  clickDismiss() {\n    this.modalController.dismiss();\n  }\n\n  openNotification() {\n    this.menu.enable(true, \"menuNotification\");\n    this.menu.open(\"menuNotification\");\n  }\n}\n","import { Injectable } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Form } from \"@angular/forms\";\nimport { tap } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\nimport { OperationalReadingsModel } from \"./operational-readings.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class OperationalReadingsService {\n  url: string = environment.baseUrl + \"v1/operational-readings-pipe/\";\n\n  // Data\n  public ormodels: OperationalReadingsModel[] = [];\n  public ormodel: OperationalReadingsModel;\n\n  constructor(private http: HttpClient) { }\n\n  post(body: Form): Observable<OperationalReadingsModel> {\n    return this.http.post<any>(this.url, body).pipe(\n      tap((res) => {\n        console.log(\"OperationalReadingsModel\", res);\n      })\n    );\n  }\n\n  get(): Observable<OperationalReadingsModel[]> {\n    return this.http.get<any>(this.url).pipe(\n      tap((res) => {\n        console.log(\"OperationalReadingsModel\", res);\n        this.ormodels = res;\n      })\n    );\n  }\n\n  getOne(id: string): Observable<OperationalReadingsModel> {\n    let urlID = this.url + id + \"/\";\n    return this.http.get<OperationalReadingsModel>(urlID).pipe(\n      tap((res: OperationalReadingsModel) => {\n        console.log(\"OperationalReadingsModel\", res);\n        this.ormodel = res;\n      })\n    );\n  }\n\n  update(id: string, body: Form): Observable<OperationalReadingsModel> {\n    return this.http.patch<OperationalReadingsModel>(this.url + id + '/', body).pipe(\n      tap((res) => {\n        console.log(\"OperationalReadingsModel\", res);\n      })\n    );\n  }\n\n  delete(id: string): Observable<any> {\n    return this.http.delete(this.url + id + \"/\").pipe(\n      tap((res) => {\n        console.log(\"OperationalReadingsModel\", res);\n      })\n    );\n  }\n\n  filter(field: string): Observable<OperationalReadingsModel[]> {\n    let urlFilter = this.url + \"?\" + field;\n    return this.http.get<OperationalReadingsModel[]>(urlFilter).pipe(\n      tap((res) => {\n        console.log(\"OperationalReadingsModel\", res);\n      })\n    );\n  }\n\n  getDescOrderList(body): Observable<OperationalReadingsModel[]> {\n    let urlOrdered = this.url + \"asc_ordered_list/\";\n    return this.http.post<any>(urlOrdered, body).pipe(\n      tap((res) => {\n        console.log(\"WorkOrderActivityCompletionModel\", res);\n      })\n    );\n  }\n}\n"],"sourceRoot":"webpack:///","file":"default~pages-technical-measurement-type-measurement-type-module~pages-technical-operational-reading~b806443f-es5.js"}