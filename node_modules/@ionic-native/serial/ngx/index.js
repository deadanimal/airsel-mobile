import { __decorate, __extends } from "tslib";
import { Injectable } from '@angular/core';
import { IonicNativePlugin, cordova } from '@ionic-native/core';
import { Observable } from 'rxjs';
var Serial = /** @class */ (function (_super) {
    __extends(Serial, _super);
    function Serial() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Serial.prototype.requestPermission = function (options) { return cordova(this, "requestPermission", { "successIndex": 1, "errorIndex": 2 }, arguments); };
    Serial.prototype.open = function (options) { return cordova(this, "open", {}, arguments); };
    Serial.prototype.write = function (data) { return cordova(this, "write", {}, arguments); };
    Serial.prototype.writeHex = function (data) { return cordova(this, "writeHex", {}, arguments); };
    Serial.prototype.read = function () { return cordova(this, "read", {}, arguments); };
    Serial.prototype.registerReadCallback = function () { return cordova(this, "registerReadCallback", { "observable": true }, arguments); };
    Serial.prototype.close = function () { return cordova(this, "close", {}, arguments); };
    Serial.pluginName = "Serial";
    Serial.plugin = "cordovarduino";
    Serial.pluginRef = "serial";
    Serial.repo = "https://github.com/xseignard/cordovarduino";
    Serial.platforms = ["Android", "Ubuntu"];
    Serial = __decorate([
        Injectable()
    ], Serial);
    return Serial;
}(IonicNativePlugin));
export { Serial };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9zcmMvQGlvbmljLW5hdGl2ZS9wbHVnaW5zL3NlcmlhbC9uZ3gvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyw4QkFBc0MsTUFBTSxvQkFBb0IsQ0FBQztBQUN4RSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sTUFBTSxDQUFDOztJQXlETiwwQkFBaUI7Ozs7SUFXM0Msa0NBQWlCLGFBQUMsT0FBaUM7SUFXbkQscUJBQUksYUFBQyxPQUEwQjtJQVcvQixzQkFBSyxhQUFDLElBQVM7SUFXZix5QkFBUSxhQUFDLElBQVM7SUFVbEIscUJBQUk7SUFZSixxQ0FBb0I7SUFVcEIsc0JBQUs7Ozs7OztJQTVFTSxNQUFNO1FBRGxCLFVBQVUsRUFBRTtPQUNBLE1BQU07aUJBM0RuQjtFQTJENEIsaUJBQWlCO1NBQWhDLE1BQU0iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBDb3Jkb3ZhLCBJb25pY05hdGl2ZVBsdWdpbiwgUGx1Z2luIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcblxuZGVjbGFyZSB2YXIgc2VyaWFsOiBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2VyaWFsUGVybWlzc2lvbk9wdGlvbnMge1xuICB2aWQ6IHN0cmluZztcbiAgcGlkOiBzdHJpbmc7XG4gIGRyaXZlcjogc3RyaW5nO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIFNlcmlhbE9wZW5PcHRpb25zIHtcbiAgYmF1ZFJhdGU6IG51bWJlcjtcbiAgZGF0YUJpdHM6IG51bWJlcjtcbiAgc3RvcEJpdHM6IG51bWJlcjtcbiAgcGFyaXR5OiBudW1iZXI7XG4gIGR0cjogYm9vbGVhbjtcbiAgcnRzOiBib29sZWFuO1xuICBzbGVlcE9uUGF1c2U6IGJvb2xlYW47XG59XG5cbi8qKlxuICogQG5hbWUgU2VyaWFsXG4gKiBAZGVzY3JpcHRpb25cbiAqIFRoaXMgcGx1Z2luIHByb3ZpZGVzIGZ1bmN0aW9ucyBmb3Igd29ya2luZyB3aXRoIFNlcmlhbCBjb25uZWN0aW9uc1xuICpcbiAqIEB1c2FnZVxuICogYGBgdHlwZXNjcmlwdFxuICogaW1wb3J0IHsgU2VyaWFsIH0gZnJvbSAnQGlvbmljLW5hdGl2ZS9zZXJpYWwvbmd4JztcbiAqXG4gKiBjb25zdHJ1Y3Rvcihwcml2YXRlIHNlcmlhbDogU2VyaWFsKSB7IH1cbiAqXG4gKiAuLi5cbiAqXG4gKiB0aGlzLnNlcmlhbC5yZXF1ZXN0UGVybWlzc2lvbigpLnRoZW4oKCkgPT4ge1xuICogICB0aGlzLnNlcmlhbC5vcGVuKHtcbiAqICAgICBiYXVkUmF0ZTogOTgwMCxcbiAqICAgICBkYXRhQml0czogNCxcbiAqICAgICBzdG9wQml0czogMSxcbiAqICAgICBwYXJpdHk6IDAsXG4gKiAgICAgZHRyOiB0cnVlLFxuICogICAgIHJ0czogdHJ1ZSxcbiAqICAgICBzbGVlcE9uUGF1c2U6IGZhbHNlXG4gKiAgIH0pLnRoZW4oKCkgPT4ge1xuICogICAgIGNvbnNvbGUubG9nKCdTZXJpYWwgY29ubmVjdGlvbiBvcGVuZWQnKTtcbiAqICAgfSk7XG4gKiB9KS5jYXRjaCgoZXJyb3I6IGFueSkgPT4gY29uc29sZS5sb2coZXJyb3IpKTtcbiAqXG4gKiBgYGBcbiAqL1xuQFBsdWdpbih7XG4gIHBsdWdpbk5hbWU6ICdTZXJpYWwnLFxuICBwbHVnaW46ICdjb3Jkb3ZhcmR1aW5vJyxcbiAgcGx1Z2luUmVmOiAnc2VyaWFsJyxcbiAgcmVwbzogJ2h0dHBzOi8vZ2l0aHViLmNvbS94c2VpZ25hcmQvY29yZG92YXJkdWlubycsXG4gIHBsYXRmb3JtczogWydBbmRyb2lkJywgJ1VidW50dSddLFxufSlcbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBTZXJpYWwgZXh0ZW5kcyBJb25pY05hdGl2ZVBsdWdpbiB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0IHBlcm1pc3Npb24gdG8gY29ubmVjdCB0byBhIHNlcmlhbCBkZXZpY2VcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge1NlcmlhbFBlcm1pc3Npb25PcHRpb25zfSBPcHRpb25zIHVzZWQgdG8gcmVxdWVzdCBzZXJpYWwgcGVybWlzc2lvbnMgZm9yIGFuIHVua25vd24gZGV2aWNlXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHBlcm1pc3Npb25zIGFyZSBncmFudGVkXG4gICAqL1xuICBAQ29yZG92YSh7XG4gICAgc3VjY2Vzc0luZGV4OiAxLFxuICAgIGVycm9ySW5kZXg6IDIsXG4gIH0pXG4gIHJlcXVlc3RQZXJtaXNzaW9uKG9wdGlvbnM/OiBTZXJpYWxQZXJtaXNzaW9uT3B0aW9ucyk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW4gY29ubmVjdGlvbiB0byBhIHNlcmlhbCBkZXZpY2VcbiAgICpcbiAgICogQHBhcmFtIG9wdGlvbnMge1NlcmlhbE9wZW5PcHRpb25zfSBPcHRpb25zIHVzZWQgdG8gb3BlbiBzZXJpYWwgY29ubmVjdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2VyaWFsIGNvbm5lY3Rpb24gaXMgb3BlbmVkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIG9wZW4ob3B0aW9uczogU2VyaWFsT3Blbk9wdGlvbnMpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSB0byBhIHNlcmlhbCBjb25uZWN0aW9uXG4gICAqXG4gICAqIEBwYXJhbSBkYXRhIHthbnl9IGRhdGEgdG8gd3JpdGUgdG8gdGhlIHNlcmlhbCBjb25uZWN0aW9uXG4gICAqIEByZXR1cm4ge1Byb21pc2U8YW55Pn0gUmV0dXJucyBhIHByb21pc2UgdGhhdCByZXNvbHZlcyB3aGVuIHRoZSB3cml0ZSBpcyBjb21wbGV0ZVxuICAgKi9cbiAgQENvcmRvdmEoKVxuICB3cml0ZShkYXRhOiBhbnkpOiBQcm9taXNlPGFueT4ge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZSBoZXggdG8gYSBzZXJpYWwgY29ubmVjdGlvblxuICAgKlxuICAgKiBAcGFyYW0gZGF0YSB7YW55fSBkYXRhIHRvIHdyaXRlIHRvIHRoZSBzZXJpYWwgY29ubmVjdGlvblxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgd3JpdGUgaXMgY29tcGxldGVcbiAgICovXG4gIEBDb3Jkb3ZhKClcbiAgd3JpdGVIZXgoZGF0YTogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogUmVhZCBmcm9tIGEgc2VyaWFsIGNvbm5lY3Rpb25cbiAgICpcbiAgICogQHJldHVybiB7UHJvbWlzZTxhbnk+fSBSZXR1cm5zIGEgcHJvbWlzZSB0aGF0IHJlc29sdmVzIHdpdGggZGF0YSByZWFkIGZyb20gdGhlIHNlcmlhbCBjb25uZWN0aW9uXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIHJlYWQoKTogUHJvbWlzZTxhbnk+IHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvKipcbiAgICogV2F0Y2ggdGhlIGluY29taW5nIGRhdGEgZnJvbSB0aGUgc2VyaWFsIGNvbm5lY3Rpb24uIENsZWFyIHRoZSB3YXRjaCBieSB1bnN1YnNjcmliaW5nIGZyb20gdGhlIG9ic2VydmFibGVcbiAgICpcbiAgICogQHJldHVybnMge09ic2VydmFibGU8YW55Pn0gT2JzZXJ2YWJsZSByZXR1cm5zIGFuIG9ic2VydmFibGUgdGhhdCB5b3UgY2FuIHN1YnNjcmliZSB0b1xuICAgKi9cbiAgQENvcmRvdmEoe1xuICAgIG9ic2VydmFibGU6IHRydWUsXG4gIH0pXG4gIHJlZ2lzdGVyUmVhZENhbGxiYWNrKCk6IE9ic2VydmFibGU8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLyoqXG4gICAqIENsb3NlIHRoZSBzZXJpYWwgY29ubmVjdGlvblxuICAgKlxuICAgKiBAcmV0dXJuIHtQcm9taXNlPGFueT59IFJldHVybnMgYSBwcm9taXNlIHRoYXQgcmVzb2x2ZXMgd2hlbiB0aGUgc2VyaWFsIGNvbm5lY3Rpb24gaXMgY2xvc2VkXG4gICAqL1xuICBAQ29yZG92YSgpXG4gIGNsb3NlKCk6IFByb21pc2U8YW55PiB7XG4gICAgcmV0dXJuO1xuICB9XG59XG4iXX0=