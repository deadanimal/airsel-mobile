import { __decorate } from "tslib";
import { Directive, ElementRef, Input, OnInit } from '@angular/core';
let ScrollbarDirective = class ScrollbarDirective {
    constructor(elementRef) {
        this.elementRef = elementRef;
    }
    ngOnInit() {
        this.hostElement = this.elementRef.nativeElement;
        if (this.hostElement && this.hostElement.tagName && this.hostElement.tagName == 'ION-CONTENT') {
            let el = document.createElement('style');
            el.innerText = this.scrollbar || this.getCustomStyle();
            this.hostElement.shadowRoot.appendChild(el);
        }
    }
    getCustomStyle() {
        if (this.allowAllScreens === true || this.allowAllScreens === 'true') {
            return `::-webkit-scrollbar {
          width: 12px;
        }
        ::-webkit-scrollbar-track {
          background: #fff;
        }
        ::-webkit-scrollbar-track:hover {
          background: #f7f7f7;
        }
        ::-webkit-scrollbar-thumb {
          background: #ccc;
        }
        ::-webkit-scrollbar-thumb:hover {
          background: #888
        }
        .inner-scroll {
          scrollbar-width: thin
        }`;
        }
        else {
            return `@media(pointer: fine) {
        ::-webkit-scrollbar {
          width: 12px;
        }
        ::-webkit-scrollbar-track {
          background: #fff;
        }
        ::-webkit-scrollbar-track:hover {
          background: #f7f7f7;
        }
        ::-webkit-scrollbar-thumb {
          background: #ccc;
        }
        ::-webkit-scrollbar-thumb:hover {
          background: #888
        }
        .inner-scroll {
          scrollbar-width: thin
        }
      }`;
        }
    }
};
ScrollbarDirective.ctorParameters = () => [
    { type: ElementRef }
];
__decorate([
    Input()
], ScrollbarDirective.prototype, "scrollbar", void 0);
__decorate([
    Input()
], ScrollbarDirective.prototype, "allowAllScreens", void 0);
ScrollbarDirective = __decorate([
    Directive({
        selector: '[scrollbar]'
    })
], ScrollbarDirective);
export { ScrollbarDirective };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsYmFyLmRpcmVjdGl2ZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2lvbi1jdXN0b20tc2Nyb2xsYmFyLyIsInNvdXJjZXMiOlsibGliL3Njcm9sbGJhci5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFLckUsSUFBYSxrQkFBa0IsR0FBL0IsTUFBYSxrQkFBa0I7SUFPN0IsWUFBbUIsVUFBc0I7UUFBdEIsZUFBVSxHQUFWLFVBQVUsQ0FBWTtJQUFJLENBQUM7SUFFOUMsUUFBUTtRQUNOLElBQUksQ0FBQyxXQUFXLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQyxhQUFhLENBQUE7UUFDaEQsSUFBSSxJQUFJLENBQUMsV0FBVyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLElBQUksQ0FBQyxXQUFXLENBQUMsT0FBTyxJQUFJLGFBQWEsRUFBRTtZQUM3RixJQUFJLEVBQUUsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLE9BQU8sQ0FBQyxDQUFBO1lBQ3hDLEVBQUUsQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDLFNBQVMsSUFBSSxJQUFJLENBQUMsY0FBYyxFQUFFLENBQUE7WUFDdEQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1NBQzVDO0lBQ0gsQ0FBQztJQUVELGNBQWM7UUFDWixJQUFHLElBQUksQ0FBQyxlQUFlLEtBQUssSUFBSSxJQUFJLElBQUksQ0FBQyxlQUFlLEtBQUssTUFBTSxFQUFFO1lBQ25FLE9BQU87Ozs7Ozs7Ozs7Ozs7Ozs7O1VBaUJILENBQUE7U0FDTDthQUFNO1lBQ0wsT0FBTzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztRQW1CTCxDQUFBO1NBQ0g7SUFDSCxDQUFDO0NBRUYsQ0FBQTs7WUF2RGdDLFVBQVU7O0FBTGhDO0lBQVIsS0FBSyxFQUFFO3FEQUFrQjtBQUNqQjtJQUFSLEtBQUssRUFBRTsyREFBa0M7QUFIL0Isa0JBQWtCO0lBSDlCLFNBQVMsQ0FBQztRQUNULFFBQVEsRUFBRSxhQUFhO0tBQ3hCLENBQUM7R0FDVyxrQkFBa0IsQ0E4RDlCO1NBOURZLGtCQUFrQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgRWxlbWVudFJlZiwgSW5wdXQsIE9uSW5pdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICdbc2Nyb2xsYmFyXSdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsYmFyRGlyZWN0aXZlIGltcGxlbWVudHMgT25Jbml0IHtcblxuICBASW5wdXQoKSBzY3JvbGxiYXI6IHN0cmluZ1xuICBASW5wdXQoKSBhbGxvd0FsbFNjcmVlbnM6IGJvb2xlYW4gfCBzdHJpbmdcblxuICBob3N0RWxlbWVudDogSFRNTEVsZW1lbnRcblxuICBjb25zdHJ1Y3RvcihwdWJsaWMgZWxlbWVudFJlZjogRWxlbWVudFJlZikgeyB9XG5cbiAgbmdPbkluaXQoKSB7XG4gICAgdGhpcy5ob3N0RWxlbWVudCA9IHRoaXMuZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50XG4gICAgaWYgKHRoaXMuaG9zdEVsZW1lbnQgJiYgdGhpcy5ob3N0RWxlbWVudC50YWdOYW1lICYmIHRoaXMuaG9zdEVsZW1lbnQudGFnTmFtZSA9PSAnSU9OLUNPTlRFTlQnKSB7XG4gICAgICBsZXQgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpXG4gICAgICBlbC5pbm5lclRleHQgPSB0aGlzLnNjcm9sbGJhciB8fCB0aGlzLmdldEN1c3RvbVN0eWxlKClcbiAgICAgIHRoaXMuaG9zdEVsZW1lbnQuc2hhZG93Um9vdC5hcHBlbmRDaGlsZChlbClcbiAgICB9XG4gIH1cblxuICBnZXRDdXN0b21TdHlsZSgpIHtcbiAgICBpZih0aGlzLmFsbG93QWxsU2NyZWVucyA9PT0gdHJ1ZSB8fCB0aGlzLmFsbG93QWxsU2NyZWVucyA9PT0gJ3RydWUnKSB7XG4gICAgICByZXR1cm4gYDo6LXdlYmtpdC1zY3JvbGxiYXIge1xuICAgICAgICAgIHdpZHRoOiAxMnB4O1xuICAgICAgICB9XG4gICAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2sge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmZmY7XG4gICAgICAgIH1cbiAgICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10cmFjazpob3ZlciB7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2Y3ZjdmNztcbiAgICAgICAgfVxuICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjY2NjO1xuICAgICAgICB9XG4gICAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdGh1bWI6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICM4ODhcbiAgICAgICAgfVxuICAgICAgICAuaW5uZXItc2Nyb2xsIHtcbiAgICAgICAgICBzY3JvbGxiYXItd2lkdGg6IHRoaW5cbiAgICAgICAgfWBcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGBAbWVkaWEocG9pbnRlcjogZmluZSkge1xuICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyIHtcbiAgICAgICAgICB3aWR0aDogMTJweDtcbiAgICAgICAgfVxuICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRyYWNrIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjZmZmO1xuICAgICAgICB9XG4gICAgICAgIDo6LXdlYmtpdC1zY3JvbGxiYXItdHJhY2s6aG92ZXIge1xuICAgICAgICAgIGJhY2tncm91bmQ6ICNmN2Y3Zjc7XG4gICAgICAgIH1cbiAgICAgICAgOjotd2Via2l0LXNjcm9sbGJhci10aHVtYiB7XG4gICAgICAgICAgYmFja2dyb3VuZDogI2NjYztcbiAgICAgICAgfVxuICAgICAgICA6Oi13ZWJraXQtc2Nyb2xsYmFyLXRodW1iOmhvdmVyIHtcbiAgICAgICAgICBiYWNrZ3JvdW5kOiAjODg4XG4gICAgICAgIH1cbiAgICAgICAgLmlubmVyLXNjcm9sbCB7XG4gICAgICAgICAgc2Nyb2xsYmFyLXdpZHRoOiB0aGluXG4gICAgICAgIH1cbiAgICAgIH1gXG4gICAgfVxuICB9XG5cbn1cbiJdfQ==