{"version":3,"sources":["node_modules/@amcharts/amcharts4/.internal/core/utils/Array.js","node_modules/@amcharts/amcharts4/.internal/core/utils/Math.js","node_modules/@amcharts/amcharts4/.internal/core/utils/Percent.js","node_modules/@amcharts/amcharts4/.internal/core/utils/Type.js","src/app/shared/services/work-activities/work-activities.service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as $math from \"./Math\";\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * UTILITY FUNCTIONS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Searches `array` for `value`.\r\n *\r\n * Returns -1 if not found.\r\n *\r\n * @param array  Source array\r\n * @param value  Value to search\r\n * @returns Index\r\n */\r\nexport function indexOf(array, value) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        // TODO handle NaN\r\n        if (array[i] === value) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Calls `test` for each element in `array`.\r\n *\r\n * If `test` returns `true` then it immediately returns `true`.\r\n *\r\n * If `test` returns `false` for all of the elements in `array` then it returns `false`.\r\n *\r\n * @param array  Source array\r\n * @param test   Function which is called on each element\r\n * @returns Whether `test` returned true or not\r\n */\r\nexport function any(array, test) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (test(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/**\r\n * Calls `fn` function for every member of array and returns a new array out\r\n * of all outputs.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n * @returns New array\r\n */\r\nexport function map(array, fn) {\r\n    var length = array.length;\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        output[i] = fn(array[i], i);\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function each(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array in reverse order and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachReverse(array, fn) {\r\n    var i = array.length;\r\n    while (i--) {\r\n        fn(array[i], i);\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * If `fn` call evaluates to `false`, further iteration is cancelled.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function eachContinue(array, fn) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (!fn(array[i], i)) {\r\n            break;\r\n        }\r\n    }\r\n}\r\n/**\r\n * Shifts an item at `index` towards beginning of the array.\r\n *\r\n * @param array  Source array\r\n * @param index  Target element index\r\n */\r\nexport function shiftLeft(array, index) {\r\n    var length = array.length;\r\n    for (var i = index; i < length; ++i) {\r\n        array[i - index] = array[i];\r\n    }\r\n    array.length = length - index;\r\n}\r\n/**\r\n * Returns the last item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function last(array) {\r\n    var length = array.length;\r\n    return length ? array[length - 1] : undefined;\r\n}\r\n/**\r\n * Returns the first item of the array.\r\n *\r\n * @param array  Source array\r\n * @returns Last item\r\n */\r\nexport function first(array) {\r\n    return array[0];\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * Caps `index` to be between `0` and `array.length`\r\n *\r\n * @param array    Source array\r\n * @param element  Item to insert\r\n * @param array    Index to insert item at\r\n */\r\nexport function insert(array, element, index) {\r\n    //if (array) {\r\n    index = $math.fitToRange(index, 0, array.length);\r\n    array.splice(index, 0, element);\r\n    //}\r\n}\r\n/**\r\n * Removes all copies of `element` from `array` (if they exist) and then\r\n * inserts `element` at `index`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item\r\n * @param array    Index to move item to\r\n */\r\nexport function setIndex(array, element, index) {\r\n    remove(array, element);\r\n    insert(array, element, index);\r\n}\r\n/**\r\n * Pushes all of the elements from `input` into `array`.\r\n *\r\n * @param array  Output array\r\n * @param input  Input array\r\n */\r\nexport function pushAll(array, input) {\r\n    var length = input.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        array.push(input[i]);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array`.\r\n *\r\n * If there are multiple copies of `element`, they are all removed.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n */\r\nexport function remove(array, element) {\r\n    var found = false;\r\n    var index = array.indexOf(element);\r\n    if (index !== -1) {\r\n        found = true;\r\n        array.splice(index, 1);\r\n        var length_1 = array.length;\r\n        while (index < length_1) {\r\n            // TODO handle NaN\r\n            if (array[index] === element) {\r\n                array.splice(index, 1);\r\n                --length_1;\r\n            }\r\n            else {\r\n                ++index;\r\n            }\r\n        }\r\n    }\r\n    return found;\r\n}\r\n/**\r\n * Adds an `element` to `array`.\r\n *\r\n * If array already contains and item like this, it is removed before adding\r\n * it again.\r\n *\r\n * Optionally `toIndex` can be specified to add element at specific index.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to move item to\r\n */\r\nexport function move(array, element, toIndex) {\r\n    // @todo this implementation must be the same as the List.moveValue method\r\n    // @todo don't do anything if the desired index is the same as the current index\r\n    var index = indexOf(array, element);\r\n    // @todo remove all old values rather than only the first ?\r\n    if (index !== -1) {\r\n        removeIndex(array, index);\r\n    }\r\n    if (toIndex == null) {\r\n        array.push(element);\r\n    }\r\n    else {\r\n        insertIndex(array, toIndex, element);\r\n    }\r\n}\r\n/**\r\n * Inserts `element` into `array` at `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to add\r\n * @param array    Index to add item at\r\n */\r\nexport function add(array, element, index) {\r\n    // Append to the end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // Add to the beginning of array if index is 0\r\n    else if (index === 0) {\r\n        array.unshift(element);\r\n    }\r\n    // Add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Removes `element` from `array` (if it exists) and then inserts `element` at\r\n * `index`.\r\n *\r\n * If `index` is not provided, it will insert `element` at the end of `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to remove\r\n * @param array    Index to move item to\r\n */\r\nexport function replace(array, element, index) {\r\n    // check if exists\r\n    var ind = array.indexOf(element);\r\n    // remove if exists\r\n    if (ind !== -1) {\r\n        array.splice(ind, 1);\r\n    }\r\n    // add to end if index is not set\r\n    if (!$type.isNumber(index)) {\r\n        array.push(element);\r\n    }\r\n    // add to indicated place if index is set\r\n    else {\r\n        array.splice(index, 0, element);\r\n    }\r\n}\r\n/**\r\n * Wraps `input` in an array, if it isn't already an array.\r\n *\r\n * @param input  Source value\r\n * @return An array\r\n */\r\nexport function toArray(input) {\r\n    if (Array.isArray(input)) {\r\n        return input;\r\n    }\r\n    else {\r\n        return [input];\r\n    }\r\n}\r\n/**\r\n * Returns `true` if `element` exists in `array`.\r\n *\r\n * @param array    Source array\r\n * @param element  Item to search for\r\n * @returns Item in array?\r\n */\r\nexport function has(array, element) {\r\n    return indexOf(array, element) !== -1;\r\n}\r\n/**\r\n * Returns a shallow copy of `array`.\r\n *\r\n * @param array  Source array\r\n * @returns Copy of the array\r\n */\r\nexport function copy(array) {\r\n    var length = array.length;\r\n    // It's faster to create the array with a pre-defined length\r\n    var output = new Array(length);\r\n    for (var i = 0; i < length; ++i) {\r\n        // Because the array has a pre-defined length, we have to assign rather than push\r\n        // This is also faster than pushing\r\n        output[i] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Returns a copy of `array` which contains all the elements between `start`\r\n * and `end`. (including `start` and excluding `end`)\r\n *\r\n * If `end` is not provided, it defaults to `array.length`.\r\n *\r\n * @param array  Source array\r\n * @param start  Start index\r\n * @param end    End index\r\n * @returns Part of the array\r\n */\r\nexport function slice(array, start, end) {\r\n    if (end === void 0) { end = array.length; }\r\n    var output = new Array(end - start);\r\n    for (var i = start; i < end; ++i) {\r\n        output[i - start] = array[i];\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Inserts a value into array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n * @param value  Value to insert\r\n */\r\nexport function insertIndex(array, index, value) {\r\n    array.splice(index, 0, value);\r\n}\r\n/**\r\n * Removes a value from array at specific index.\r\n *\r\n * @param array  Source array\r\n * @param index  Index\r\n */\r\nexport function removeIndex(array, index) {\r\n    array.splice(index, 1);\r\n}\r\n/**\r\n * Orders an array using specific `ordering` function and returns index of\r\n * the `value`.\r\n *\r\n * @ignore Exclude from docs\r\n * @param array     Source array\r\n * @param ordering  An ordering function\r\n * @param value     Value to search for\r\n * @returns Result of the search\r\n */\r\nexport function getSortedIndex(array, ordering, value) {\r\n    var start = 0;\r\n    var end = array.length;\r\n    var found = false;\r\n    while (start < end) {\r\n        // TODO is this faster/slower than using Math.floor ?\r\n        var pivot = (start + end) >> 1;\r\n        var order = ordering(value, array[pivot]);\r\n        // less\r\n        if (order < 0) {\r\n            end = pivot;\r\n            // equal\r\n        }\r\n        else if (order === 0) {\r\n            found = true;\r\n            start = pivot + 1;\r\n            // more\r\n        }\r\n        else {\r\n            start = pivot + 1;\r\n        }\r\n    }\r\n    return {\r\n        found: found,\r\n        index: (found ? start - 1 : start)\r\n    };\r\n}\r\n/**\r\n * Searches the array using custom function and returns index of the item if\r\n * found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns -1.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Index of the item if found\r\n */\r\nexport function findIndex(array, matches) {\r\n    var length = array.length;\r\n    for (var i = 0; i < length; ++i) {\r\n        if (matches(array[i], i)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n}\r\n/**\r\n * Searches the array using custom function and returns item if found.\r\n *\r\n * Will call `matches` function on all items of the array. If return value\r\n * evaluates to `true`, index is returned.\r\n *\r\n * Otherwise returns `undefined`.\r\n *\r\n * @param array    Source array\r\n * @param matches  Search function\r\n * @returns Item if found\r\n */\r\nexport function find(array, matches) {\r\n    var index = findIndex(array, matches);\r\n    if (index !== -1) {\r\n        return array[index];\r\n    }\r\n}\r\n/**\r\n * Iterates through all items in array and calls `fn` function for each of\r\n * them.\r\n *\r\n * @param array  Source array\r\n * @param fn     Callback function\r\n */\r\nexport function shuffle(array) {\r\n    // https://stackoverflow.com/a/2450976/449477\r\n    var currentIndex = array.length, temporaryValue, randomIndex;\r\n    // While there remain elements to shuffle...\r\n    while (0 !== currentIndex) {\r\n        // Pick a remaining element...\r\n        randomIndex = Math.floor(Math.random() * currentIndex);\r\n        currentIndex -= 1;\r\n        // And swap it with the current element.\r\n        temporaryValue = array[currentIndex];\r\n        array[currentIndex] = array[randomIndex];\r\n        array[randomIndex] = temporaryValue;\r\n    }\r\n}\r\nexport function keepIf(array, keep) {\r\n    var length = array.length;\r\n    var i = 0;\r\n    while (i < length) {\r\n        if (keep(array[i])) {\r\n            ++i;\r\n        }\r\n        else {\r\n            array.splice(i, 1);\r\n            --length;\r\n        }\r\n    }\r\n}\r\n//# sourceMappingURL=Array.js.map","/**\r\n * A collection of Math-related functions\r\n *\r\n * @todo Comment trigonometric functions?\r\n */\r\nimport * as $type from \"./Type\";\r\n/**\r\n * ============================================================================\r\n * CONSTANTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nexport var PI = Math.PI;\r\nexport var HALFPI = PI / 2;\r\nexport var RADIANS = PI / 180;\r\nexport var DEGREES = 180 / PI;\r\n/**\r\n * Converts any value and fits it into a specific value range.\r\n *\r\n * @param value  Source value\r\n * @param min    Minimum allowable value\r\n * @param max    Maximum allowable value\r\n * @return Number\r\n */\r\nexport function toNumberRange(value, min, max) {\r\n    if ($type.hasValue(value)) {\r\n        value = $type.toNumber(value);\r\n        return fitToRange(value, min, max);\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Rounds the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @param floor  In case value ends with 0.5 and precision is 0, we might need to floor the value instead of ceiling it.\r\n * @return Rounded value\r\n */\r\nexport function round(value, precision, floor) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        var rounded = Math.round(value);\r\n        if (floor) {\r\n            if (rounded - value == 0.5) {\r\n                rounded--;\r\n            }\r\n        }\r\n        return rounded;\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.round(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Ceils the numeric value to whole number or specific precision of set.\r\n *\r\n * @param value      Value\r\n * @param precision  Precision (number of decimal points)\r\n * @return Rounded value\r\n */\r\nexport function ceil(value, precision) {\r\n    if (!$type.isNumber(precision) || precision <= 0) {\r\n        return Math.ceil(value);\r\n    }\r\n    else {\r\n        var d = Math.pow(10, precision);\r\n        return Math.ceil(value * d) / d;\r\n    }\r\n}\r\n/**\r\n * Stretches `t` so that it will always be between `from` and `to`.\r\n *\r\n * @param t     Number from 0 to 1\r\n * @param from  Lowest possible value\r\n * @param to    Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function stretch(t, from, to) {\r\n    return (t * (to - from)) + from;\r\n}\r\n/**\r\n * Adjust numeric value so it fits to specific value range.\r\n *\r\n * @param value     Value\r\n * @param minValue  Lowest possible value\r\n * @param maxValue  Highest possible value\r\n * @return Adjusted value\r\n */\r\nexport function fitToRange(value, minValue, maxValue) {\r\n    if ($type.isNumber(minValue)) {\r\n        if ($type.isNumber(maxValue) && maxValue < minValue) {\r\n            var temp = maxValue;\r\n            maxValue = minValue;\r\n            minValue = temp;\r\n        }\r\n        if (value < minValue) {\r\n            value = minValue;\r\n        }\r\n    }\r\n    if ($type.isNumber(maxValue)) {\r\n        if (value > maxValue) {\r\n            value = maxValue;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns sine of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function sin(value) {\r\n    return round(Math.sin(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns tan of a number.\r\n *\r\n * @param value  Value\r\n * @return Sine\r\n */\r\nexport function tan(value) {\r\n    return round(Math.tan(RADIANS * value), 10);\r\n}\r\n/**\r\n * Returns cosine of a number.\r\n *\r\n * @param value  Value\r\n * @return Cosine\r\n */\r\nexport function cos(value) {\r\n    return round(Math.cos(RADIANS * value), 10);\r\n}\r\nexport function max(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right > left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\nexport function min(left, right) {\r\n    if ($type.isNumber(left)) {\r\n        if ($type.isNumber(right)) {\r\n            if (right < left) {\r\n                return right;\r\n            }\r\n            else {\r\n                return left;\r\n            }\r\n        }\r\n        else {\r\n            return left;\r\n        }\r\n    }\r\n    else if ($type.isNumber(right)) {\r\n        return right;\r\n    }\r\n    else {\r\n        return null;\r\n    }\r\n}\r\n/**\r\n * Returns the closest value from the array of values to the reference value.\r\n *\r\n * @param values  Array of values\r\n * @param value   Reference value\r\n * @return Closes value from the array\r\n */\r\nexport function closest(values, referenceValue) {\r\n    return values.reduce(function (prev, curr) {\r\n        return (Math.abs(curr - referenceValue) < Math.abs(prev - referenceValue) ? curr : prev);\r\n    });\r\n}\r\n/**\r\n * Checks whether two ranges of values intersect.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Any intersecting numbers?\r\n */\r\nexport function intersect(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    return Math.max(start1, start2) <= Math.min(end1, end2);\r\n}\r\n/**\r\n * Inverts the range of values.\r\n *\r\n * @param range  Range\r\n */\r\nexport function invertRange(range) {\r\n    var start = $type.getValue(range.start);\r\n    var end = $type.getValue(range.end);\r\n    return { start: 1 - end, end: 1 - start };\r\n}\r\n/**\r\n * Returns an intersection range between two ranges of values.\r\n *\r\n * @param range1  Range 1\r\n * @param range2  Range 2\r\n * @return Intersecting value range\r\n */\r\nexport function intersection(range1, range2) {\r\n    var start1 = $type.getValue(range1.start);\r\n    var start2 = $type.getValue(range2.start);\r\n    var end1 = $type.getValue(range1.end);\r\n    var end2 = $type.getValue(range2.end);\r\n    var startMax = Math.max(start1, start2);\r\n    var endMin = Math.min(end1, end2);\r\n    if (endMin < startMax) {\r\n        return undefined;\r\n    }\r\n    else {\r\n        return { start: startMax, end: endMin };\r\n    }\r\n}\r\n/**\r\n * Returns pixel \"distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.sqrt(Math.pow(Math.abs(point1.x - point2.x), 2) + Math.pow(Math.abs(point1.y - point2.y), 2));\r\n}\r\n/**\r\n * Returns pixel \"horizontal distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getHorizontalDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.abs(point1.x - point2.x);\r\n}\r\n/**\r\n * Returns pixel \"vertical distance\" between two points.\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Distance in relative pixels\r\n */\r\nexport function getVerticalDistance(point1, point2) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    return Math.abs(point1.y - point2.y);\r\n}\r\n/**\r\n * Returns approximate pixel \"distance\" between two points of cubic curve\r\n *\r\n * If second point is not specified, distance from {x:0, y:0} point is\r\n * calculated.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @param controlPointA  Control Point 1\r\n * @param controlPointB  Control Point 2\r\n * @param stepCount  number of steps (the more, the more accurate result)\r\n * @return Distance in relative pixels\r\n */\r\nexport function getCubicCurveDistance(point1, point2, controlPointA, controlPointB, stepCount) {\r\n    if (!point1) {\r\n        return 0;\r\n    }\r\n    if (!point2) {\r\n        point2 = { x: 0, y: 0 };\r\n    }\r\n    var distance = 0;\r\n    var prevPoint = point1;\r\n    if (stepCount > 0) {\r\n        for (var s = 0; s <= stepCount; s++) {\r\n            var point = getPointOnCubicCurve(point1, point2, controlPointA, controlPointB, s / stepCount);\r\n            distance += getDistance(prevPoint, point);\r\n            prevPoint = point;\r\n        }\r\n    }\r\n    return distance;\r\n}\r\n/**\r\n * Returns scale based on original and end position of the two points.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Scale        Calculated scale\r\n */\r\nexport function getScale(point1, startPoint1, point2, startPoint2) {\r\n    var initialDistance = getDistance(startPoint1, startPoint2);\r\n    var currentDistance = getDistance(point1, point2);\r\n    return Math.abs(currentDistance / initialDistance);\r\n}\r\n/**\r\n * Returns an exact mid point between two points.\r\n *\r\n * @param point1     Position of point 1\r\n * @param point2     Position of point 2\r\n * @return Mid point  Position of mid-point\r\n */\r\nexport function getMidPoint(point1, point2, position) {\r\n    if (!$type.isNumber(position)) {\r\n        position = 0.5;\r\n    }\r\n    return {\r\n        \"x\": (point1.x + (point2.x - point1.x) * position),\r\n        \"y\": (point1.y + (point2.y - point1.y) * position)\r\n    };\r\n}\r\n/**\r\n * Returns difference in angles between starting and ending position of two\r\n * vectors.\r\n *\r\n * @param point1       Current position of point 1\r\n * @param startPoint1  Start position of point 1\r\n * @param point2       Current position of point 1\r\n * @param startPoint2  Start position of point 2\r\n * @return Angle difference in degrees\r\n */\r\nexport function getRotation(point1, startPoint1, point2, startPoint2) {\r\n    // Get start and end angles\r\n    var startAngle = getAngle(startPoint1, startPoint2);\r\n    var angle = getAngle(point1, point2);\r\n    // Calculate angle\r\n    var diff = startAngle - angle;\r\n    if (diff < 0) {\r\n        diff += 360;\r\n    }\r\n    return diff;\r\n}\r\n/**\r\n * Calculates angle of the vector based on two or one point.\r\n *\r\n * @param point1  Point 1\r\n * @param point2  Point 2\r\n * @return Angle in degrees\r\n */\r\nexport function getAngle(point1, point2) {\r\n    if (!point2) {\r\n        point2 = { x: point1.x * 2, y: point1.y * 2 };\r\n    }\r\n    var diffX = point2.x - point1.x;\r\n    var diffY = point2.y - point1.y;\r\n    var angle = Math.atan2(diffY, diffX) * DEGREES;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    return normalizeAngle(angle);\r\n}\r\n/**\r\n * Returns the shift in coordinates of the center when item is rotated, moved\r\n * and scaled at the same time.\r\n *\r\n * @param center       Current center\r\n * @param point1       Frst reference point\r\n * @param startPoint1  Original position of the first reference point\r\n * @param point2       Second reference point\r\n * @param startPoint2  Original position of the first reference point\r\n * @return Shift in center point coordinates\r\n */\r\nexport function getCenterShift(center, point1, startPoint1, point2, startPoint2) {\r\n    // Get angle\r\n    var angle = getRotation(point1, startPoint1, point2, startPoint2) - 90;\r\n    if (angle < 0) {\r\n        angle += 360;\r\n    }\r\n    // Get distance between new position\r\n    var distance = getDistance(point1, point2);\r\n    // Calculate new X\r\n    var x = Math.cos(angle) / distance + point1.x;\r\n    var y = Math.cos(angle) / distance + point1.y;\r\n    var shift = {\r\n        \"x\": x - center.x,\r\n        \"y\": y - center.y\r\n    };\r\n    return shift;\r\n}\r\n/**\r\n * Converts an array of points into a bounding box rectangle.\r\n *\r\n * Array can contain any number of points.\r\n *\r\n * @param points  Points\r\n * @return Bounding box rectangle\r\n */\r\nexport function getBBox(points) {\r\n    if (points) {\r\n        var length_1 = points.length;\r\n        if (length_1 !== 0) {\r\n            var left = void 0;\r\n            var right = void 0;\r\n            var top_1;\r\n            var bottom = void 0;\r\n            for (var i = 0; i < length_1; i++) {\r\n                var point = points[i];\r\n                if (!$type.isNumber(right) || (point.x > right)) {\r\n                    right = point.x;\r\n                }\r\n                if (!$type.isNumber(left) || (point.x < left)) {\r\n                    left = point.x;\r\n                }\r\n                if (!$type.isNumber(top_1) || (point.y < top_1)) {\r\n                    top_1 = point.y;\r\n                }\r\n                if (!$type.isNumber(bottom) || (point.y > bottom)) {\r\n                    bottom = point.y;\r\n                }\r\n            }\r\n            return { x: left, y: top_1, width: right - left, height: bottom - top_1 };\r\n        }\r\n    }\r\n    return { x: 0, y: 0, width: 0, height: 0 };\r\n}\r\n/**\r\n * Returns a [[IRectangle]] object representing a common rectangle that fits\r\n * all passed in rectangles in it.\r\n *\r\n * @param rectangles  An array of rectangles\r\n * @return Common rectangle\r\n */\r\nexport function getCommonRectangle(rectangles) {\r\n    var length = rectangles.length;\r\n    if (length !== 0) {\r\n        var minX = void 0;\r\n        var minY = void 0;\r\n        var maxX = void 0;\r\n        var maxY = void 0;\r\n        for (var i = 0; i < length; i++) {\r\n            var rectangle = rectangles[i];\r\n            minX = min(rectangle.x, minX);\r\n            minY = min(rectangle.y, minY);\r\n            maxX = max(rectangle.x + rectangle.width, maxX);\r\n            maxY = max(rectangle.y + rectangle.height, maxY);\r\n        }\r\n        return { x: minX, y: minY, width: maxX - minX, height: maxY - minY };\r\n    }\r\n}\r\n/**\r\n * [getPointOnQuadraticCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA        [description]\r\n * @param pointB        [description]\r\n * @param controlPoint  [description]\r\n * @param position      [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnQuadraticCurve(pointA, pointB, controlPoint, position) {\r\n    var x = (1 - position) * (1 - position) * pointA.x + 2 * (1 - position) * position * controlPoint.x + position * position * pointB.x;\r\n    var y = (1 - position) * (1 - position) * pointA.y + 2 * (1 - position) * position * controlPoint.y + position * position * pointB.y;\r\n    return { x: x, y: y };\r\n}\r\n/**\r\n * [getPointOnCubicCurve description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param pointA         [description]\r\n * @param pointB         [description]\r\n * @param controlPointA  [description]\r\n * @param controlPointB  [description]\r\n * @param position       [description]\r\n * @return [description]\r\n */\r\nexport function getPointOnCubicCurve(pointA, pointB, controlPointA, controlPointB, position) {\r\n    var point = { x: 0, y: 0 };\r\n    var mt1 = 1 - position;\r\n    var mt2 = mt1 * mt1;\r\n    var mt3 = mt2 * mt1;\r\n    point.x = pointA.x * mt3 + controlPointA.x * 3 * mt2 * position + controlPointB.x * 3 * mt1 * position * position + pointB.x * position * position * position;\r\n    point.y = pointA.y * mt3 + controlPointA.y * 3 * mt2 * position + controlPointB.y * 3 * mt1 * position * position + pointB.y * position * position * position;\r\n    return point;\r\n}\r\n/**\r\n * [getCubicControlPointA description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointA(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((-p0.x + p1.x / tensionX + p2.x) * tensionX), y: ((-p0.y + p1.y / tensionY + p2.y) * tensionY) };\r\n}\r\n/**\r\n * [getCubicControlPointB description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param p0        [description]\r\n * @param p1        [description]\r\n * @param p2        [description]\r\n * @param p3        [description]\r\n * @param tensionX  [description]\r\n * @param tensionY  [description]\r\n * @return [description]\r\n */\r\nexport function getCubicControlPointB(p0, p1, p2, p3, tensionX, tensionY) {\r\n    tensionX = adjustTension(tensionX);\r\n    tensionY = adjustTension(tensionY);\r\n    return { x: ((p1.x + p2.x / tensionX - p3.x) * tensionX), y: ((p1.y + p2.y / tensionY - p3.y) * tensionY) };\r\n}\r\n/**\r\n * [adjustTension description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param tension  [description]\r\n * @return [description]\r\n */\r\nexport function adjustTension(tension) {\r\n    return 1 - tension + 0.00001;\r\n}\r\n/**\r\n * [normalizeAngle description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @param value  [description]\r\n * @return [description]\r\n */\r\nexport function normalizeAngle(value) {\r\n    if (value == 360) {\r\n        return 360;\r\n    }\r\n    return value % 360;\r\n}\r\n/**\r\n * [normalizeAngleToRange description]\r\n *\r\n * @ignore Exclude from docs\r\n * @todo Description\r\n * @todo review this with various angles, can be tested on radar chart with custom start/end angles\r\n * @param value       [description]\r\n * @param startAngle  [description]\r\n * @param endAngle    [description]\r\n * @return [description]\r\n */\r\nexport function fitAngleToRange(value, startAngle, endAngle) {\r\n    if (startAngle > endAngle) {\r\n        var temp = startAngle;\r\n        startAngle = endAngle;\r\n        endAngle = temp;\r\n    }\r\n    value = normalizeAngle(value);\r\n    var count = (startAngle - normalizeAngle(startAngle)) / 360;\r\n    if (value < startAngle) {\r\n        value += 360 * (count + 1);\r\n    }\r\n    var maxEnd = startAngle + (endAngle - startAngle) / 2 + 180;\r\n    var maxStart = startAngle + (endAngle - startAngle) / 2 - 180;\r\n    if (value > endAngle) {\r\n        if (value - 360 > startAngle) {\r\n            value -= 360;\r\n        }\r\n        else {\r\n            if (value < maxEnd) {\r\n                value = endAngle;\r\n            }\r\n            else {\r\n                value = startAngle;\r\n            }\r\n        }\r\n    }\r\n    if (value < startAngle) {\r\n        if (value > maxStart) {\r\n            value = startAngle;\r\n        }\r\n        else {\r\n            value = endAngle;\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Returns [[IRectangle]] of an arc in relative values, assuming that the\r\n * center is at the circle center.\r\n *\r\n * Used to find out max radius of an arc.\r\n *\r\n * @ignore Exclude from docs\r\n * @param startAngle  Start angle\r\n * @param endAngle    End angle\r\n * @param radius    \t Relative radius\r\n * @return Rectangle\r\n */\r\nexport function getArcRect(startAngle, endAngle, radius) {\r\n    var minX = Number.MAX_VALUE;\r\n    var minY = Number.MAX_VALUE;\r\n    var maxX = -Number.MAX_VALUE;\r\n    var maxY = -Number.MAX_VALUE;\r\n    var bpoints = [];\r\n    if (!$type.isNumber(radius)) {\r\n        radius = 1;\r\n    }\r\n    bpoints.push(getArcPoint(radius, startAngle));\r\n    bpoints.push(getArcPoint(radius, endAngle));\r\n    var fromAngle = Math.min(Math.floor(startAngle / 90) * 90, Math.floor(endAngle / 90) * 90);\r\n    var toAngle = Math.max(Math.ceil(startAngle / 90) * 90, Math.ceil(endAngle / 90) * 90);\r\n    for (var angle = fromAngle; angle <= toAngle; angle += 90) {\r\n        if (angle >= startAngle && angle <= endAngle) {\r\n            bpoints.push(getArcPoint(radius, angle));\r\n        }\r\n    }\r\n    for (var i = 0; i < bpoints.length; i++) {\r\n        var pt = bpoints[i];\r\n        if (pt.x < minX) {\r\n            minX = pt.x;\r\n        }\r\n        if (pt.y < minY) {\r\n            minY = pt.y;\r\n        }\r\n        if (pt.x > maxX) {\r\n            maxX = pt.x;\r\n        }\r\n        if (pt.y > maxY) {\r\n            maxY = pt.y;\r\n        }\r\n    }\r\n    return ({ x: minX, y: minY, width: maxX - minX, height: maxY - minY });\r\n}\r\n/**\r\n * Returns point on arc\r\n *\r\n * @param center point\r\n * @param radius\r\n * @param arc\r\n * @return {boolean}\r\n */\r\nexport function getArcPoint(radius, arc) {\r\n    return ({ x: radius * cos(arc), y: radius * sin(arc) });\r\n}\r\n/**\r\n * Returns true if a point is within rectangle\r\n *\r\n * @param point\r\n * @param rectangle\r\n * @return {boolean}\r\n */\r\nexport function isInRectangle(point, rectangle) {\r\n    if (point.x >= rectangle.x && point.x <= rectangle.x + rectangle.width && point.y > rectangle.y && point.y < rectangle.y + rectangle.height) {\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nexport function getLineIntersection(pointA1, pointA2, pointB1, pointB2) {\r\n    var x = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.x - pointB2.x) - (pointA1.x - pointA2.x) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    var y = ((pointA1.x * pointA2.y - pointA2.x * pointA1.y) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x * pointB2.y - pointB1.y * pointB2.x)) / ((pointA1.x - pointA2.x) * (pointB1.y - pointB2.y) - (pointA1.y - pointA2.y) * (pointB1.x - pointB2.x));\r\n    return { x: x, y: y };\r\n}\r\n//# sourceMappingURL=Math.js.map","/**\r\n * ============================================================================\r\n * MAIN CLASS\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Represents a relative value (percent).\r\n *\r\n * The Percent object, can be instantiated using two ways:\r\n *\r\n * * Via `new Percent(X)`.\r\n * * Via `am4core.percent(X)`.\r\n *\r\n * `Percent` type objects can be used in a number of dual-measuring or\r\n * positioning properties, like `width`. E.g.:\r\n *\r\n * ```TypeScript\r\n * chart.paddingRight = new Percent(10);\r\n * // or\r\n * chart.paddingRight = am4core.percent(10);\r\n * ```\r\n * ```JavaScript\r\n * chart.paddingRight = new Percent(10);\r\n * // or\r\n * chart.paddingRight = am4core.percent(10);\r\n * ```\r\n * ```JSON\r\n * {\r\n *   // ...\r\n *   \"paddingRight\": \"10%\"\r\n * }\r\n * ```\r\n */\r\nvar Percent = /** @class */ (function () {\r\n    /**\r\n     * Constructor.\r\n     *\r\n     * @param percent  Percent value\r\n     */\r\n    function Percent(percent) {\r\n        this._value = percent;\r\n    }\r\n    Object.defineProperty(Percent.prototype, \"value\", {\r\n        /**\r\n         * Relative value.\r\n         *\r\n         * E.g. 100% is 1, 50% is 0.5, etc.\r\n         *\r\n         * This is useful to apply transformations to other values. E.g.:\r\n         *\r\n         * ```TypeScript\r\n         * let value = 256;\r\n         * let percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         * ```JavaScript\r\n         * var value = 256;\r\n         * var percent = new am4core.Percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         *\r\n         * Alternatively, you can use `am4core.percent()` helper function:\r\n         *\r\n         * ```TypeScript\r\n         * let value = 256;\r\n         * let percent = am4core.percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         * ```JavaScript\r\n         * var value = 256;\r\n         * var percent = am4core.percent(50);\r\n         * console.log(value * percent.value); // outputs 128\r\n         * ```\r\n         *\r\n         * @readonly\r\n         * @return Relative value\r\n         */\r\n        get: function () {\r\n            return this._value / 100;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(Percent.prototype, \"percent\", {\r\n        /**\r\n         * Value in percent.\r\n         *\r\n         * @return Percent\r\n         */\r\n        get: function () {\r\n            return this._value;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Percent.prototype.toString = function () {\r\n        return \"\" + this._value + \"%\";\r\n    };\r\n    return Percent;\r\n}());\r\nexport { Percent };\r\n/**\r\n * Converts numeric percent value to a proper [[Percent]] object.\r\n *\r\n * ```TypeScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n * ```JavaScript\r\n * pieSeries.radius = am4core.percent(80);\r\n * ```\r\n *\r\n * @param value  Percent\r\n * @return Percent object\r\n */\r\nexport function percent(value) {\r\n    return new Percent(value);\r\n}\r\n/**\r\n * Checks if value is a [[Percent]] object.\r\n *\r\n * @ignore Exclude from docs\r\n * @param value  Input value\r\n * @return Is percent?\r\n */\r\nexport function isPercent(value) {\r\n    return value instanceof Percent;\r\n}\r\n//# sourceMappingURL=Percent.js.map","/**\r\n * A collection of utility functions for various type checks and conversion\r\n * @todo Review unused functions for removal\r\n * @hidden\r\n */\r\n/**\r\n * ============================================================================\r\n * IMPORTS\r\n * ============================================================================\r\n * @hidden\r\n */\r\nimport { percent, isPercent } from \"./Percent\";\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Returns `true` if value is not a number (NaN).\r\n *\r\n * @param value Input value\r\n * @return Is NaN?\r\n * @deprecated Is not used anywhere. JS built-in isNaN is used everywhere. Maybe we don't need this, or if we do, then we should use it everywhere\r\n */\r\nexport function isNaN(value) {\r\n    return Number(value) !== value;\r\n}\r\n/**\r\n * Returns a type of the value.\r\n *\r\n * @param value  Input value\r\n * @return Type of the value\r\n */\r\nexport function getType(value) {\r\n    return ({}).toString.call(value);\r\n}\r\n/**\r\n * Returns a default value if the passed in value is empty.\r\n *\r\n * @param value     Input value\r\n * @param optional  Default value\r\n * @return Value or default value whichever is available\r\n * @deprecated Not used anywhere\r\n */\r\nexport function getDefault(value, optional) {\r\n    return value || optional;\r\n}\r\n/**\r\n * Checks if the passed in value is a string.\r\n *\r\n * @param value  Value\r\n * @return Is string?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkString(value) {\r\n    if (typeof value === \"string\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a boolean.\r\n *\r\n * @param value  Value\r\n * @return Is boolean?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkBoolean(value) {\r\n    if (typeof value === \"boolean\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a boolean but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a number.\r\n *\r\n * @param value  Value\r\n * @return Is number?\r\n * @throws {Error}\r\n */\r\nexport function checkNumber(value) {\r\n    if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a number but got \" + getType(value));\r\n    }\r\n    return true;\r\n}\r\n/**\r\n * Checks if the passed in value is an object.\r\n *\r\n * @param value  Value\r\n * @return Is object?\r\n * @throws {Error}\r\n * @todo Is the input type correct?\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkObject(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Object]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an object but got \" + t);\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is an array.\r\n *\r\n * @param value  Value\r\n * @return Is array?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkArray(value) {\r\n    if (Array.isArray(value)) {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected an array but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Checks if the passed in value is a Date object.\r\n *\r\n * @param value  Value\r\n * @return Is Date object?\r\n * @throws {Error}\r\n * @deprecated Not used anywhere\r\n */\r\nexport function checkDate(value) {\r\n    var t = getType(value);\r\n    if (t === \"[object Date]\") {\r\n        return true;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a date but got \" + t);\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CASTING\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Casts string or a number into string.\r\n *\r\n * @param value  Input\r\n * @return String value\r\n * @deprecated Not used anywhere\r\n */\r\nexport function castString(value) {\r\n    if (typeof value === \"string\") {\r\n        return value;\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        return \"\" + value;\r\n    }\r\n    else {\r\n        throw new Error(\"Expected a string or number but got \" + getType(value));\r\n    }\r\n}\r\n/**\r\n * Casts string or a number into a number.\r\n *\r\n * @param value   Input value\r\n * @return Number  value\r\n * @throws {Error}\r\n */\r\nexport function castNumber(value) {\r\n    if (typeof value === \"string\") {\r\n        var number = +value;\r\n        if (isNaN(number)) {\r\n            throw new Error(\"Cannot cast string \" + JSON.stringify(value) + \" to a number\");\r\n        }\r\n        else {\r\n            return number;\r\n        }\r\n    }\r\n    else if (typeof value === \"number\") {\r\n        if (isNaN(value)) {\r\n            throw new Error(\"Expected a number but got NaN\");\r\n        }\r\n        else {\r\n            return value;\r\n        }\r\n    }\r\n    else {\r\n        var t = getType(value);\r\n        if (t === \"[object Date]\") {\r\n            return value.getTime();\r\n        }\r\n        else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}\r\n/**\r\n * Casts number, string or Date into a Date object.\r\n *\r\n * @param value  Input value\r\n * @return Date object\r\n * @deprecated Not used anywhere\r\n * @throws {Error}\r\n * @hidden\r\n * @deprecated\r\n */\r\n/*export function castDate(value: string | number | Date, formatter?: DateFormatter): Date {\r\n    if (typeof value === \"string\") {\r\n        if (formatter) {\r\n            return formatter.parse(value);\r\n        }\r\n        return new Date(value);\r\n\r\n    } else if (typeof value === \"number\") {\r\n        return new Date(value);\r\n\r\n    } else {\r\n        const t = getType(value);\r\n\r\n        if (t === \"[object Date]\") {\r\n            return value;\r\n\r\n        } else {\r\n            throw new Error(\"Expected a string, number, or date but got \" + t);\r\n        }\r\n    }\r\n}*/\r\n/**\r\n * ============================================================================\r\n * QUICK CONVERSION\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Converts any value into `boolean`.\r\n *\r\n * @param value  Source value\r\n * @return `true` or `false`\r\n */\r\nexport function toBoolean(value) {\r\n    return value ? true : false;\r\n}\r\n/**\r\n * Converts any value into a `number`.\r\n *\r\n * @param value  Source value\r\n * @return Number representation of value\r\n */\r\nexport function toNumber(value) {\r\n    if (hasValue(value) && !isNumber(value)) {\r\n        var converted = Number(value);\r\n        if (isNaN(converted) && isString(value) && value != \"\") {\r\n            return toNumber(value.replace(/[^0-9.\\-]+/g, ''));\r\n        }\r\n        return converted;\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value into a string (text).\r\n *\r\n * @param value  Source value\r\n * @return String representation of the input\r\n */\r\nexport function toText(value) {\r\n    if (hasValue(value) && !isString(value)) {\r\n        if (isNumber(value)) {\r\n            return castString(value);\r\n        }\r\n        else if (isObject(value)) {\r\n            return value.toString();\r\n        }\r\n    }\r\n    return value;\r\n}\r\n/**\r\n * Converts any value to a number or [[Percent]].\r\n *\r\n * If the parameter is a string and contains \"%\", it will\r\n * convert it into a [[Percent]].\r\n *\r\n * Otherwise, it will convert into a number.\r\n *\r\n * @param value  Number or percent\r\n * @return Percent object\r\n */\r\nexport function toNumberOrPercent(value) {\r\n    if (!hasValue(value) || isNumber(value) || isPercent(value)) {\r\n        return value;\r\n    }\r\n    if (isString(value) && value.indexOf(\"%\") != -1) {\r\n        return percent(toNumber(value));\r\n    }\r\n    return toNumber(value);\r\n}\r\n/**\r\n * Checks if a variable has a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Has value?\r\n */\r\nexport function hasValue(a) {\r\n    return a != null;\r\n}\r\n/**\r\n * Returns a value or throws an {Error} exception if the variable has not\r\n * value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValue(a) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        throw new Error(\"Value doesn't exist\");\r\n    }\r\n}\r\n/**\r\n * Returns a value, or returns the default value if it doesn't have a value.\r\n *\r\n * @param a  Input value\r\n * @returns                        Value\r\n */\r\nexport function getValueDefault(a, defaultValue) {\r\n    if (hasValue(a)) {\r\n        return a;\r\n    }\r\n    else {\r\n        return defaultValue;\r\n    }\r\n}\r\n/**\r\n * ============================================================================\r\n * TYPE CHECK\r\n * ============================================================================\r\n * @hidden\r\n */\r\n/**\r\n * Checks if parameter is `Date`.\r\n *\r\n * @param value  Input value\r\n * @return Is Date?\r\n */\r\nexport function isDate(value) {\r\n    return getType(value) === \"[object Date]\";\r\n}\r\n/**\r\n * Checks if parameter is `string`.\r\n *\r\n * @param value  Input value\r\n * @return Is string?\r\n */\r\nexport function isString(value) {\r\n    return typeof value === \"string\";\r\n}\r\n/**\r\n * Checks if parameter is `number`.\r\n *\r\n * @param value  Input value\r\n * @return Is number?\r\n */\r\nexport function isNumber(value) {\r\n    return typeof value === \"number\" && Number(value) == value;\r\n}\r\n/**\r\n * Checks if parameter is `object`.\r\n *\r\n * @param value  Input value\r\n * @return Is object?\r\n */\r\nexport function isObject(value) {\r\n    return typeof value === \"object\" && value != null;\r\n}\r\n/**\r\n * Checks if parameter is `Array`.\r\n *\r\n * @param value  Input value\r\n * @return Is Array?\r\n */\r\nexport function isArray(value) {\r\n    return Array.isArray(value);\r\n}\r\n//# sourceMappingURL=Type.js.map","import { Injectable } from \"@angular/core\";\nimport { environment } from \"src/environments/environment\";\nimport { HttpClient } from \"@angular/common/http\";\nimport { Form } from \"@angular/forms\";\nimport { tap } from \"rxjs/operators\";\nimport { Observable } from \"rxjs\";\nimport { WorkActivitiesModel } from \"./work-activities.model\";\n\n@Injectable({\n  providedIn: \"root\",\n})\nexport class WorkActivitiesService {\n  url: string = environment.baseUrl + \"v1/work-activities/\";\n\n  // Data\n  public wamodels: WorkActivitiesModel[] = [];\n  public wamodel: WorkActivitiesModel;\n\n  constructor(private http: HttpClient) {}\n\n  post(body: Form): Observable<WorkActivitiesModel> {\n    return this.http.post<any>(this.url, body).pipe(\n      tap((res) => {\n        console.log(\"WorkActivitiesModel\", res);\n      })\n    );\n  }\n\n  get(): Observable<WorkActivitiesModel[]> {\n    return this.http.get<any>(this.url).pipe(\n      tap((res) => {\n        console.log(\"WorkActivitiesModel\", res);\n        this.wamodels = res;\n      })\n    );\n  }\n\n  getOne(id: string): Observable<WorkActivitiesModel> {\n    let urlID = this.url + id + \"/\";\n    return this.http.get<WorkActivitiesModel>(urlID).pipe(\n      tap((res: WorkActivitiesModel) => {\n        console.log(\"WorkActivitiesModel\", res);\n        this.wamodel = res;\n      })\n    );\n  }\n\n  update(id: string, body: Form): Observable<WorkActivitiesModel> {\n    return this.http.patch<WorkActivitiesModel>(this.url + id + '/', body).pipe(\n      tap((res) => {\n        console.log(\"WorkActivitiesModel\", res);\n      })\n    );\n  }\n\n  delete(id: string): Observable<any> {\n    return this.http.delete(this.url + id + \"/\").pipe(\n      tap((res) => {\n        console.log(\"WorkActivitiesModel\", res);\n      })\n    );\n  }\n\n  filter(field: string): Observable<WorkActivitiesModel[]> {\n    let urlFilter = this.url + \"?\" + field;\n    return this.http.get<WorkActivitiesModel[]>(urlFilter).pipe(\n      tap((res) => {\n        console.log(\"WorkActivitiesModel\", res);\n      })\n    );\n  }\n}\n"],"sourceRoot":"webpack:///","file":"default~pages-technical-maintenance-work-list-maintenance-work-list-module~pages-technical-service-h~0e48d102-es5.js"}